{
  "hash": "e98d9d99694456af1178155b4f75a684",
  "result": {
    "markdown": "---\naliases:\n  - /rdkit/3d-editor/2021/01/23/grafting-fragments\nauthor: Peter Schmidtke\nbadges: true\nbranch: master\ncategories:\n  - rdkit\n  - 3d-editor\ndate: '2021-01-23'\ndescription: This is a quick set-up for attaching a fragment to a molecule on a particular location.\nimage: toc-grafting.png\noutput-file: 2021-01-23-grafting-fragments.html\ntitle: Grafting fragments onto molecules in rdkit - babysteps\ntoc: true\nexecute:\n  freeze: auto\n---\n\n## Context\n\nIn this quick walkthrough I describe the first steps to attach fragments from a fragment library onto a molecule of interest. The main idea here is to prepare code snippets for the integration of all of this into the web-based 3d-editor project I started with Daniel Alvarez some time ago. As I'm learning a lot of new things about rdkit I prefer to write it up here, as I found most of the relevant information in the mailing list & the rdkit documentation. \n\n### The molecule to modify\n\nI'll go for the same molecule as the one used for now in our BRD4 structure of the [3d editor project](https://github.com/Discngine/3d-editor) - that just comes from one of the [official openforcefield examples here](https://notebook.community/open-forcefield-group/openforcefield/examples/using_smirnoff_with_amber_protein_forcefield/BRD4_inhibitor_benchmark).\n\n### The fragment to add\n\nI wanted to go for something easy for now ... so let's start with a methyl group ;) I made a quick shoutout on twitter on current available 3D fragments that could be helpful to write such a sketcher. [Geoff Hutchison](https://twitter.com/ghutchis) (Mr Avogadro) gave me a great hint to [this library here](https://github.com/openchemistry/molecules). It contains way more fragments than I'd initially considered for this project and the coordinates seem reasonable & compatible with the systems we'll manage in the 3d-editor.\n\nSo I just took the methane from there (for now), ran it through Marvinsketch to replace one of the protons with an R group and then exported the whole thing as mol file (to the best of my knowledge rdkit doesn't support the chemistry markup language yet).\n\n### Preliminary steps\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\n# https://sourceforge.net/p/rdkit/mailman/message/34922663/ procedure extracted from this support request\nimport rdkit\nfrom rdkit import Chem\nfrom rdkit.Chem.Draw import IPythonConsole\nfrom rdkit.Chem import Draw\nIPythonConsole.ipython_useSVG=True \nimport py3Dmol\nfrom rdkit.Chem import AllChem\nimport copy\nfrom rdkit.Chem.rdMolAlign import AlignMol\n\n```\n:::\n\n\nBelow, the molecule we want to add the methyl group to. We'll attach it on the triazole ring. \n\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n\n// Create drawing area\ndiv_mol = html`<div style=\"width:400px;height:400px;position:relative\"></div>`;\n```\n\n```{ojs}\n//| code-fold: true\n//| output: false\n//| echo: false\n\n// Create viewer\n  NGL = require(\"ngl@next\");\n\n   molBlock = await FileAttachment(\"ligand.sdf\").blob();\n\nstage = new NGL.Stage(div_mol, { backgroundColor: \"black\",cameraType: \"orthographic\"});\nstructure = await stage.loadFile(molBlock, {ext: \"sdf\", asTrajectory: false})\nstructure.addRepresentation(\"licorice\",{ \"sele\": \"all\", \"color\": \"element\"});\nstructure.autoView();\n\n```\n\nAs the aim is to integrate that into the 3D-editor, the user ultimately will be able to click on the proton where he wants to place the fragment. Thus, we know which exact atom we want to attach it to. Below I'm determining this showing plain atom indices in the rdkit molecule\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsuppl = Chem.SDMolSupplier('ligand.sdf',removeHs=False)\nfor mol in suppl:\n    mblock = Chem.MolToMolBlock(mol)\n\nfor atom in mol.GetAtoms():\n        atom.SetAtomMapNum(atom.GetIdx())\nmol2d=copy.deepcopy(mol)\nAllChem.Compute2DCoords(mol2d)    #do this on a copy here\n\nDraw.MolToImage(mol2d, includeAtomNumbers=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n![](2021-01-23-grafting-fragments_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\nNext I'm loading the fragment and extract the position of the R-group and the connected atom as atom indices (I'll need that later). I know this is very limited and ugly for now, but it serves the purpose here & now ;)\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef getAttachmentVector(mol):\n    \"\"\" for a fragment to add, search for the position of the attachment point and extract the atom id's of the attachment point and the connected atom (currently only single bond supported)\n    mol: fragment passed as rdkit molecule\n    return: tuple (atom indices)\n    \"\"\"\n\n    rindex=-1\n    rindexNeighbor=-1\n    for atom in mol.GetAtoms():\n        if(atom.GetAtomicNum()==0):\n            rindex=atom.GetIdx()\n            neighbours=atom.GetNeighbors()\n            if(len(neighbours)==1):\n                rindexNeighbor=neighbours[0].GetIdx()\n            else: \n                print(\"two attachment points not supported yet\")\n                return None\n    return((rindex,rindexNeighbor))\n\n\n\nfragment=Chem.MolFromMolFile('methyl.mol',removeHs=False)\nret=getAttachmentVector(fragment)\n\nfor atom in mol.GetAtoms():\n        atom.SetAtomMapNum(atom.GetIdx())\nif(ret):\n    fragIndex1,fragIndex2=ret\n\nprint(fragIndex1, fragIndex2)\nChem.MolToMolFile(fragment,\"molblock.mol\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4 1\n```\n:::\n:::\n\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n\n// Create drawing area\ndiv_mol_2 = html`<div style=\"width:400px;height:400px;position:relative\"></div>`;\n```\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n//| output: false\n\n\n// Draw new molecule\n\nmolBlock2 = await FileAttachment(\"molblock.mol\").blob();\nstage2 = new NGL.Stage(div_mol_2, { backgroundColor: \"black\",cameraType: \"orthographic\"});\nstructure2 = await stage2.loadFile(molBlock2, {ext: \"sdf\", asTrajectory: false})\nstructure2.addRepresentation(\"licorice\",{ \"sele\": \"all\", \"color\": \"element\"});\nstructure2.autoView();\n```\n\n\n\n\n\nNow let's extract also the atom index of the proton, and also the carbon the proton is attached to on the molecule.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nqueryAtomIndex=20 #defined by clicking on an atom in the sketcher -> needs to be a proton right now for grafting\n\natom=mol.GetAtomWithIdx(queryAtomIndex)\nneighbours=atom.GetNeighbors()\nif(len(neighbours)==1):\n    rindexNeighbor=neighbours[0].GetIdx()\nelse: \n    print(\"two attachment points not supported yet\")\n    \nmolIndex1=queryAtomIndex\nmolIndex2=rindexNeighbor\nprint(molIndex1,molIndex2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20 9\n```\n:::\n:::\n\n\n### Aligning the fragment onto the molecule\n\nNow I have the bond of the carbon to proton selected in the molecule and the carbon to R-group in my fragment. These bonds can be aligned onto each other to position the 3D-fragment correctly versus the molecule. This can be conveniently done using the AlignMol function available in rdkit.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nAlignMol(fragment,mol,atomMap=((fragIndex2,molIndex1),(fragIndex1,molIndex2))) #important to specify the atomMap here, this aligns only the bonds\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.02749767976054038\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\n#the rest is just to display things here\nChem.MolToMolFile(mol,\"molblock3.mol\")\nChem.MolToMolFile(fragment,\"fragblock3.mol\")\n```\n:::\n\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n\n// Create drawing area\ndiv_mol_3 = html`<div style=\"width:400px;height:400px;position:relative\"></div>`;\n```\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n//| output: false\n\n\n// Draw new molecule\n\nmolBlock3 = await FileAttachment(\"molblock3.mol\").blob();\nfragBlock3 = await FileAttachment(\"fragblock3.mol\").blob();\nstage3 = new NGL.Stage(div_mol_3, { backgroundColor: \"black\",cameraType: \"orthographic\"});\nsmol3=await stage3.loadFile(molBlock3, {ext: \"sdf\", asTrajectory: false});\nsmol3.addRepresentation(\"licorice\",{ \"sele\": \"all\", \"color\": \"element\"});\nsfrag3=await stage3.loadFile(fragBlock3, {ext: \"sdf\", asTrajectory: false});\nsfrag3.addRepresentation(\"licorice\",{ \"sele\": \"all\", \"color\": \"element\"});\nsfrag3.autoView();\n```\n\n\n\n\nAs you can see, the fragment gets placed correctly on top of the proton. Now we have however a few overlapping atoms in place. We can use the rdkit edition functions to address this and combine both overlapping molecules now into a final single molecule.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef connectMols(mol1, mol2, atom1, atom2):\n        \"\"\"function copied from here https://github.com/molecularsets/moses/blob/master/moses/baselines/combinatorial.py\"\"\"\n        combined = Chem.CombineMols(mol1, mol2)\n        emol = Chem.EditableMol(combined)\n        neighbor1_idx = atom1.GetNeighbors()[0].GetIdx()\n        neighbor2_idx = atom2.GetNeighbors()[0].GetIdx()\n        atom1_idx = atom1.GetIdx()\n        atom2_idx = atom2.GetIdx()\n        bond_order = atom2.GetBonds()[0].GetBondType()\n        emol.AddBond(neighbor1_idx,\n                     neighbor2_idx + mol1.GetNumAtoms(),\n                     order=bond_order)\n        emol.RemoveAtom(atom2_idx + mol1.GetNumAtoms())\n        emol.RemoveAtom(atom1_idx)\n        mol = emol.GetMol()\n        return mol \n\nfinalMol=connectMols(mol,fragment,mol.GetAtomWithIdx(molIndex1),fragment.GetAtomWithIdx(fragIndex1))\nChem.SanitizeMol(finalMol)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nrdkit.Chem.rdmolops.SanitizeFlags.SANITIZE_NONE\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\"}\n#the rest is just to display things here\nChem.MolToMolFile(finalMol,\"finalmol.mol\")\n```\n:::\n\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n\n// Create drawing area\ndiv_mol_4 = html`<div style=\"width:400px;height:400px;position:relative\"></div>`;\n```\n\n```{ojs}\n//| code-fold: true\n//| echo: false\n//| output: false\n\n\n// Draw new molecule\n\nmolBlock4 = await FileAttachment(\"finalmol.mol\").blob();\nstage4 = new NGL.Stage(div_mol_4, { backgroundColor: \"black\",cameraType: \"orthographic\"});\nfinalmol=await stage4.loadFile(molBlock4, {ext: \"sdf\", asTrajectory: false});\nfinalmol.addRepresentation(\"licorice\",{ \"sele\": \"all\", \"color\": \"element\"});\nfinalmol.autoView();\n```\n\n\nAnd voilà. Our methyl is nicely placed and oriented. That's one of the easiest cases and we'll have to consider torsion angles & protein environment at a later stage as well, but this should provide first basic steps for simple additions like the one done here.\n\n",
    "supporting": [
      "2021-01-23-grafting-fragments_files"
    ],
    "filters": [],
    "includes": {}
  }
}